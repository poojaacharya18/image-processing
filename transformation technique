translation:
import numpy as np
import cv2
import matplotlib.pyplot as plt

# read the input image
img = cv2.imread("C:/Users/User/Pictures/Saved Pictures/pic/redrose.jpg")
# convert from BGR to RGB so we can plot using matplotlib
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
# disable x & y axis

# show the image
plt.imshow(img)
plt.show()
# get the image shape
rows, cols, dim = img.shape
# transformation matrix for translation
M = np.float32([[1, 0, 50],
                [0, 1, 50],
                [0, 0, 1]])
# apply a perspective transformation to the image
translated_img = cv2.warpPerspective(img, M, (cols, rows))
# disable x & y axis

# show the resulting image
plt.imshow(translated_img)
plt.show()
# save the resulting image to disk
plt.imsave("city_translated.jpg", translated_img)

Scaling:
import numpy as np
import cv2
import matplotlib.pyplot as plt

# read the input image
img = cv2.imread("C:/Users/User/Pictures/Saved Pictures/pic/redrose.jpg")
# convert from BGR to RGB so we can plot using matplotlib
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
# disable x & y axis

# show the image
plt.imshow(img)
plt.show()
# get the image shape
rows, cols, dim = img.shape
#transformation matrix for Scaling
M = np.float32([[1.5, 0  , 0],
            	[0,   1, 0],
            	[0,   0,   1]])
# apply a perspective transformation to the image
scaled_img = cv2.warpPerspective(img,M,(cols*2,rows*2))
# disable x & y axis

# show the resulting image
plt.imshow(scaled_img)
plt.show()
# save the resulting image to disk
plt.imsave("city_scaled.jpg", scaled_img)

Shearing on x and y axis:
import numpy as np
import cv2
import matplotlib.pyplot as plt

# read the input image
img = cv2.imread("C:/Users/User/Pictures/Saved Pictures/pic/redrose.jpg")
# convert from BGR to RGB so we can plot using matplotlib
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
# disable x & y axis
plt.axis('off')
# show the image
plt.imshow(img)
plt.show()
# get the image shape
rows, cols, dim = img.shape
# transformation matrix for Shearing
# shearing applied to x-axis
M = np.float32([[1, 0.5, 0],
             	[0, 1  , 0],
            	[0, 0  , 1]])
# shearing applied to y-axis
Mi= np.float32([[1,   0, 0],
           	  [0.5, 1, 0],
           	  [0,   0, 1]])
# apply a perspective transformation to the image                
sheared_img = cv2.warpPerspective(img,M,(int(cols*1.5),int(rows*1.5)))
sheared_img1 = cv2.warpPerspective(img,Mi,(int(cols*1.5),int(rows*1.5)))
# disable x & y axis
plt.axis('off')
# show the resulting image
plt.imshow(sheared_img)
plt.show()
plt.imshow(sheared_img1)
plt.show()
# save the resulting image to disk
plt.imsave("city_sheared.jpg", sheared_img)


Reflection:
import numpy as np
import cv2
import matplotlib.pyplot as plt

# read the input image
img = cv2.imread("C:/Users/User/Pictures/Saved Pictures/pic/redrose.jpg")
# convert from BGR to RGB so we can plot using matplotlib
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
# disable x & y axis
plt.axis('off')
# show the image
plt.imshow(img)
plt.show()
# get the image shape
rows, cols, dim = img.shape
# transformation matrix for x-axis reflection 
M = np.float32([[1,  0, 0   ],
                [0, -1, rows],
                [0,  0, 1   ]])
# transformation matrix for y-axis reflection
Mi= np.float32([[-1, 0, cols],
                 [ 0, 1, 0   ],
                 [ 0, 0, 1   ]])
# apply a perspective transformation to the image
reflected_img = cv2.warpPerspective(img,M,(int(cols),int(rows)))
reflected_img1 = cv2.warpPerspective(img,Mi,(int(cols),int(rows)))
# disable x & y axis

# show the resulting image
plt.imshow(reflected_img)
plt.show()
plt.imshow(reflected_img1)
plt.show()
# save the resulting image to disk
plt.imsave("city_reflected.jpg", reflected_img)

Rotation:
import numpy as np
import cv2
import matplotlib.pyplot as plt

# read the input image
img = cv2.imread("C:/Users/User/Pictures/Saved Pictures/pic/redrose.jpg")
# convert from BGR to RGB so we can plot using matplotlib
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
# disable x & y axis
plt.axis('off')
# show the image
plt.imshow(img)
plt.show()
# get the image shape
rows, cols, dim = img.shape
#angle from degree to radian
angle = np.radians(10)
#transformation matrix for Rotation
M = np.float32([[np.cos(angle), -(np.sin(angle)), 0],
            	[np.sin(angle), np.cos(angle), 0],
            	[0, 0, 1]])
# apply a perspective transformation to the image
rotated_img = cv2.warpPerspective(img, M, (int(cols),int(rows)))
# disable x & y axis
plt.axis('off')
# show the resulting image
plt.imshow(rotated_img)
plt.show()
# save the resulting image to disk
plt.imsave("city_rotated.jpg", rotated_img)
